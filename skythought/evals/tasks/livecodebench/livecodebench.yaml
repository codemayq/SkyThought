handler: livecodebench
dataset_path: "livecodebench/code_generation_lite"  # repo ID in huggingface
dataset_subset: null 
dataset_split: test
dataset_kwargs:
  version_tag: release_v2
  trust_remote_code: true
question_key: task_id
answer_key: null
templating_parameters: 
  #stdin_template: "Generate an executable Python function generated from the given prompt. The function should take stdin as input and print the output. Simply call the function after the definition. {prompt}"
  #non_stdin_template: "Generate an executable Python function generated from the given prompt. Return the function body without invoking it at the final solution. {prompt}"
  stdin_template: "A conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., <think> reasoning process here </think> <answer> answer here </answer>. <|User|> You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.\n\nQuestion: {prompt}\n\nRead the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.```python\n# YOUR CODE HERE\n```\n\n<|Assistant|>"
  non_stdin_template: "A conversation between User and Assistant. The user asks a question, and the Assistant solves it. The assistant first thinks about the reasoning process in the mind and then provides the user with the answer. The reasoning process and answer are enclosed within <think> </think> and <answer> </answer> tags, respectively, i.e., <think> reasoning process here </think> <answer> answer here </answer>. <|User|> You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.\n\nQuestion: {prompt}\n\nYou will use the following starter code to write the solution to the problem and enclose your code within delimiters.```python\n{entry_point}\n```\n\n<|Assistant|>"
# Optionally, you can filter the dataset by difficulty
# preprocess_config:
#   difficulty: easy
